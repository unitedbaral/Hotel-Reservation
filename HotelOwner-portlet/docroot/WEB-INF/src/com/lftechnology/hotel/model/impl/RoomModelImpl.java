/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.lftechnology.hotel.model.impl;

import com.lftechnology.hotel.model.Room;
import com.lftechnology.hotel.model.RoomModel;
import com.lftechnology.hotel.model.RoomSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Room service. Represents a row in the &quot;SD_Room&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.lftechnology.hotel.model.RoomModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RoomImpl}.
 * </p>
 *
 * @author ranjan
 * @see RoomImpl
 * @see com.lftechnology.hotel.model.Room
 * @see com.lftechnology.hotel.model.RoomModel
 * @generated
 */
@JSON(strict = true)
public class RoomModelImpl extends BaseModelImpl<Room> implements RoomModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a room model instance should use the {@link com.lftechnology.hotel.model.Room} interface instead.
	 */
	public static final String TABLE_NAME = "SD_Room";
	public static final Object[][] TABLE_COLUMNS = {
			{ "roomId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "roomno", Types.BIGINT },
			{ "location", Types.VARCHAR },
			{ "roomtypeId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table SD_Room (roomId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,roomno LONG,location VARCHAR(75) null,roomtypeId LONG)";
	public static final String TABLE_SQL_DROP = "drop table SD_Room";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.lftechnology.hotel.model.Room"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.lftechnology.hotel.model.Room"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Room toModel(RoomSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Room model = new RoomImpl();

		model.setRoomId(soapModel.getRoomId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setRoomno(soapModel.getRoomno());
		model.setLocation(soapModel.getLocation());
		model.setRoomtypeId(soapModel.getRoomtypeId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Room> toModels(RoomSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Room> models = new ArrayList<Room>(soapModels.length);

		for (RoomSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.lftechnology.hotel.model.Room"));

	public RoomModelImpl() {
	}

	public long getPrimaryKey() {
		return _roomId;
	}

	public void setPrimaryKey(long primaryKey) {
		setRoomId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_roomId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Room.class;
	}

	public String getModelClassName() {
		return Room.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("roomId", getRoomId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("roomno", getRoomno());
		attributes.put("location", getLocation());
		attributes.put("roomtypeId", getRoomtypeId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long roomId = (Long)attributes.get("roomId");

		if (roomId != null) {
			setRoomId(roomId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long roomno = (Long)attributes.get("roomno");

		if (roomno != null) {
			setRoomno(roomno);
		}

		String location = (String)attributes.get("location");

		if (location != null) {
			setLocation(location);
		}

		Long roomtypeId = (Long)attributes.get("roomtypeId");

		if (roomtypeId != null) {
			setRoomtypeId(roomtypeId);
		}
	}

	@JSON
	public long getRoomId() {
		return _roomId;
	}

	public void setRoomId(long roomId) {
		_roomId = roomId;
	}

	@JSON
	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public long getRoomno() {
		return _roomno;
	}

	public void setRoomno(long roomno) {
		_roomno = roomno;
	}

	@JSON
	public String getLocation() {
		if (_location == null) {
			return StringPool.BLANK;
		}
		else {
			return _location;
		}
	}

	public void setLocation(String location) {
		_location = location;
	}

	@JSON
	public long getRoomtypeId() {
		return _roomtypeId;
	}

	public void setRoomtypeId(long roomtypeId) {
		_roomtypeId = roomtypeId;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Room.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Room toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Room)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		RoomImpl roomImpl = new RoomImpl();

		roomImpl.setRoomId(getRoomId());
		roomImpl.setGroupId(getGroupId());
		roomImpl.setCompanyId(getCompanyId());
		roomImpl.setUserId(getUserId());
		roomImpl.setRoomno(getRoomno());
		roomImpl.setLocation(getLocation());
		roomImpl.setRoomtypeId(getRoomtypeId());

		roomImpl.resetOriginalValues();

		return roomImpl;
	}

	public int compareTo(Room room) {
		long primaryKey = room.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Room room = null;

		try {
			room = (Room)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = room.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Room> toCacheModel() {
		RoomCacheModel roomCacheModel = new RoomCacheModel();

		roomCacheModel.roomId = getRoomId();

		roomCacheModel.groupId = getGroupId();

		roomCacheModel.companyId = getCompanyId();

		roomCacheModel.userId = getUserId();

		roomCacheModel.roomno = getRoomno();

		roomCacheModel.location = getLocation();

		String location = roomCacheModel.location;

		if ((location != null) && (location.length() == 0)) {
			roomCacheModel.location = null;
		}

		roomCacheModel.roomtypeId = getRoomtypeId();

		return roomCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{roomId=");
		sb.append(getRoomId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", roomno=");
		sb.append(getRoomno());
		sb.append(", location=");
		sb.append(getLocation());
		sb.append(", roomtypeId=");
		sb.append(getRoomtypeId());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.lftechnology.hotel.model.Room");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>roomId</column-name><column-value><![CDATA[");
		sb.append(getRoomId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>roomno</column-name><column-value><![CDATA[");
		sb.append(getRoomno());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>location</column-name><column-value><![CDATA[");
		sb.append(getLocation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>roomtypeId</column-name><column-value><![CDATA[");
		sb.append(getRoomtypeId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Room.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Room.class
		};
	private long _roomId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private long _roomno;
	private String _location;
	private long _roomtypeId;
	private Room _escapedModelProxy;
}