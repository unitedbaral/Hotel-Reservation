/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.lftechnology.hotel.model.impl;

import com.lftechnology.hotel.model.RoomType;
import com.lftechnology.hotel.model.RoomTypeModel;
import com.lftechnology.hotel.model.RoomTypeSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the RoomType service. Represents a row in the &quot;SD_RoomType&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.lftechnology.hotel.model.RoomTypeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RoomTypeImpl}.
 * </p>
 *
 * @author ranjan
 * @see RoomTypeImpl
 * @see com.lftechnology.hotel.model.RoomType
 * @see com.lftechnology.hotel.model.RoomTypeModel
 * @generated
 */
@JSON(strict = true)
public class RoomTypeModelImpl extends BaseModelImpl<RoomType>
	implements RoomTypeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a room type model instance should use the {@link com.lftechnology.hotel.model.RoomType} interface instead.
	 */
	public static final String TABLE_NAME = "SD_RoomType";
	public static final Object[][] TABLE_COLUMNS = {
			{ "roomtypeId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "description", Types.VARCHAR },
			{ "pricepernight", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table SD_RoomType (roomtypeId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,description VARCHAR(75) null,pricepernight DATE null)";
	public static final String TABLE_SQL_DROP = "drop table SD_RoomType";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.lftechnology.hotel.model.RoomType"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.lftechnology.hotel.model.RoomType"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static RoomType toModel(RoomTypeSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		RoomType model = new RoomTypeImpl();

		model.setRoomtypeId(soapModel.getRoomtypeId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setDescription(soapModel.getDescription());
		model.setPricepernight(soapModel.getPricepernight());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<RoomType> toModels(RoomTypeSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<RoomType> models = new ArrayList<RoomType>(soapModels.length);

		for (RoomTypeSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.lftechnology.hotel.model.RoomType"));

	public RoomTypeModelImpl() {
	}

	public long getPrimaryKey() {
		return _roomtypeId;
	}

	public void setPrimaryKey(long primaryKey) {
		setRoomtypeId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_roomtypeId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return RoomType.class;
	}

	public String getModelClassName() {
		return RoomType.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("roomtypeId", getRoomtypeId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("description", getDescription());
		attributes.put("pricepernight", getPricepernight());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long roomtypeId = (Long)attributes.get("roomtypeId");

		if (roomtypeId != null) {
			setRoomtypeId(roomtypeId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Date pricepernight = (Date)attributes.get("pricepernight");

		if (pricepernight != null) {
			setPricepernight(pricepernight);
		}
	}

	@JSON
	public long getRoomtypeId() {
		return _roomtypeId;
	}

	public void setRoomtypeId(long roomtypeId) {
		_roomtypeId = roomtypeId;
	}

	@JSON
	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	public Date getPricepernight() {
		return _pricepernight;
	}

	public void setPricepernight(Date pricepernight) {
		_pricepernight = pricepernight;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			RoomType.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RoomType toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (RoomType)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		RoomTypeImpl roomTypeImpl = new RoomTypeImpl();

		roomTypeImpl.setRoomtypeId(getRoomtypeId());
		roomTypeImpl.setGroupId(getGroupId());
		roomTypeImpl.setCompanyId(getCompanyId());
		roomTypeImpl.setUserId(getUserId());
		roomTypeImpl.setDescription(getDescription());
		roomTypeImpl.setPricepernight(getPricepernight());

		roomTypeImpl.resetOriginalValues();

		return roomTypeImpl;
	}

	public int compareTo(RoomType roomType) {
		long primaryKey = roomType.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		RoomType roomType = null;

		try {
			roomType = (RoomType)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = roomType.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<RoomType> toCacheModel() {
		RoomTypeCacheModel roomTypeCacheModel = new RoomTypeCacheModel();

		roomTypeCacheModel.roomtypeId = getRoomtypeId();

		roomTypeCacheModel.groupId = getGroupId();

		roomTypeCacheModel.companyId = getCompanyId();

		roomTypeCacheModel.userId = getUserId();

		roomTypeCacheModel.description = getDescription();

		String description = roomTypeCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			roomTypeCacheModel.description = null;
		}

		Date pricepernight = getPricepernight();

		if (pricepernight != null) {
			roomTypeCacheModel.pricepernight = pricepernight.getTime();
		}
		else {
			roomTypeCacheModel.pricepernight = Long.MIN_VALUE;
		}

		return roomTypeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{roomtypeId=");
		sb.append(getRoomtypeId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", pricepernight=");
		sb.append(getPricepernight());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.lftechnology.hotel.model.RoomType");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>roomtypeId</column-name><column-value><![CDATA[");
		sb.append(getRoomtypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pricepernight</column-name><column-value><![CDATA[");
		sb.append(getPricepernight());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = RoomType.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			RoomType.class
		};
	private long _roomtypeId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _description;
	private Date _pricepernight;
	private RoomType _escapedModelProxy;
}